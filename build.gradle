import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'net.darkhax.curseforgegradle' version '1.1.16'
    id "com.modrinth.minotaur" version "2.+"
}

jarJar.enable()

version = mod_version
group = mod_group_id
archivesBaseName = "${mod_name}-Forge-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: mapping_channel, version: mapping_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://jitpack.io" }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("curse.maven:beacons-for-all-308641:${beacons_for_all_version}")

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.0-rc.5"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.2.0-rc.5")) {
        jarJar.ranged(it, "[0.2.0-rc.5,)")
    }

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}

mixin {
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
    config "mixins.${mod_id}.json"
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = System.getenv('CURSEFORGE_TOKEN')

    def mainFile = upload(921066, "build/libs/CerbonsBetterBeacons-Forge-${minecraft_version}-${mod_version}.jar")
    mainFile.changelog = rootProject.file(changelog).getText('UTF-8')
    mainFile.changelogType = 'markdown'
    mainFile.releaseType = release_type
    mainFile.addGameVersion("1.20", "${minecraft_version}")
    mainFile.addOptional(beacons_for_all)
    mainFile.addOptional(just_enough_beacons_reforged)
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    versionName = "Better Beacons ${minecraft_version}-${project.version}"
    versionNumber = "${project.version}"
    projectId = "gSeQTNSE"
    changelog = rootProject.file(project.changelog).getText('UTF-8')
    versionType = release_type
    uploadFile = jar
    dependencies {
        optional.project beacons_for_all
        optional.project just_enough_beacons_reforged
    }
}

jar {
    classifier "pure" // Jar without jar-in-jar

    manifest {
        attributes([
                "Specification-Title"     : mod_name,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : project.jar.archiveVersion,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
    exclude "**/unused"
    exclude "**/genscripts"
}

tasks.register('sourcesJar', Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

tasks.register('deobfJar', Jar) {
    classifier "deobf"
    from sourceSets.main.output
}

tasks.jarJar.configure {
    classifier "" // "Main" jar should be the one with jar-in-jar

    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
    exclude "**/unused"
    exclude "**/genscripts"
}

artifacts {
    archives sourcesJar
    archives deobfJar
}

//jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
